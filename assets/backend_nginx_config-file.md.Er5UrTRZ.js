import{_ as r,c as o,o as a,ah as n,j as t,a as d}from"./chunks/framework.BrJYEL96.js";const m=JSON.parse('{"title":"配置文件","description":"","frontmatter":{},"headers":[],"relativePath":"backend/nginx/config-file.md","filePath":"backend/nginx/config-file.md","lastUpdated":1743348162000}'),i={name:"backend/nginx/config-file.md"};function l(c,e,s,h,p,u){return a(),o("div",null,e[0]||(e[0]=[n('<h1 id="配置文件" tabindex="-1">配置文件 <a class="header-anchor" href="#配置文件" aria-label="Permalink to &quot;配置文件&quot;">​</a></h1><h4 id="配置文件参数" tabindex="-1">配置文件参数 <a class="header-anchor" href="#配置文件参数" aria-label="Permalink to &quot;配置文件参数&quot;">​</a></h4><table tabindex="0"><thead><tr><th>参数</th><th>默认</th><th>意义</th></tr></thead><tbody><tr><td>worker_process</td><td>auto</td><td>启动的子进程数，默认auto会根据电脑有几颗CPU而启动几个进程</td></tr><tr><td>worker_connections</td><td>1024</td><td>每个工作worker子进程最大连接数</td></tr><tr><td>include</td><td>mime.types</td><td>包含MIME类型</td></tr><tr><td>default_type</td><td>application/octet-stream</td><td>默认类型</td></tr><tr><td>sendfile</td><td>on</td><td>启用高效文件传输</td></tr><tr><td>tcp_nopush</td><td>on</td><td>优化TCP传输</td></tr><tr><td>tcp_nodelay</td><td>on</td><td>禁用延迟</td></tr><tr><td>keepalive_timeout</td><td>65</td><td>长连接超时时间</td></tr><tr><td>gzip</td><td>on</td><td>启用gzip压缩</td></tr><tr><td>gzip_types</td><td>text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;</td><td>压缩的MIME类型</td></tr></tbody></table><h2 id="模块" tabindex="-1">模块 <a class="header-anchor" href="#模块" aria-label="Permalink to &quot;模块&quot;">​</a></h2><h3 id="main" tabindex="-1">main <a class="header-anchor" href="#main" aria-label="Permalink to &quot;main&quot;">​</a></h3><p>全局配置</p><table tabindex="0"><thead><tr><th>参数</th><th>示例</th><th>默认</th><th>意义</th></tr></thead><tbody><tr><td>user</td><td>user USERNAME [GROUP]</td><td>nobody</td><td>指定运行Nginx的worker子进程的属主和属组</td></tr><tr><td>pid</td><td>pid /path/to/nginx.pid</td><td></td><td>指定运行Nginx的master主进程的pid文件存放路径</td></tr><tr><td>worker_rlimit_nofile</td><td>worker_rlimit_nofile 20480</td><td></td><td>指定worker子进程可以打开的最大文件句柄数，但是系统最大进程数为65535</td></tr><tr><td>worker_rlimit_core</td><td>worker_rlimit_core 50M</td><td></td><td>指定worker子进程异常终止后的core文件，用于记录分析问题</td></tr><tr><td>working_directory</td><td>working_directory /path/to/tmp</td><td></td><td>配合worker_rlimit_core，指定core存放目录，需要有写权限</td></tr><tr><td>worker_process</td><td></td><td>auto</td><td>启动的子进程数，默认auto会根据电脑有几颗CPU而启动几个进程</td></tr><tr><td>worker_connections</td><td></td><td>1024</td><td>每个工作worker子进程最大连接数</td></tr><tr><td>worker_cpu_affinity</td><td>worker_cpu_affinity 0001 0010 0100 1000</td><td></td><td>将每个worker子进程与我们的CPU物理核心绑定</td></tr><tr><td>worker_priority</td><td>worker_priority -10</td><td>linux默认进程的优先级值为129，值越小越优先，nice值设定范围-20到=19</td><td>指定worker子进程的nice值，以调整运行Nginx的优先级，通常设为负值，以优先调用Nginx</td></tr><tr><td>worker_shutdown_timeout</td><td>worker_shutdown_timeout 5s</td><td></td><td>指定worker子进程优雅退出时的超时时间</td></tr><tr><td>work_resolution</td><td>work_resolution 100ms</td><td></td><td>work子进程内部使用的计时器精度，调整的时间间隔越大，系统调用越少</td></tr><tr><td>lock_file</td><td>负载均衡互斥锁文件存放的路径</td><td>lock_file logs/nginx.lock</td><td></td></tr></tbody></table><h3 id="events" tabindex="-1">events <a class="header-anchor" href="#events" aria-label="Permalink to &quot;events&quot;">​</a></h3><p>事件模块设置</p><table tabindex="0"><thead><tr><th>参数</th><th>意义</th><th>默认</th><th>示例|推荐</th></tr></thead><tbody><tr><td>use</td><td>使用何何种驱动模型</td><td>默认不指定，让Nginx自己选择</td><td>use select|poll|kqueue|<code>epoll</code>|/dev/poll|eventport</td></tr><tr><td>worker_connections</td><td>worker子进程处理的最大并发数</td><td>worker_connections 1024</td><td>一般<code>65535/work_process</code>|65535</td></tr><tr><td>accept_mutex</td><td>是否打开负载均衡互斥锁</td><td>off</td><td>accept_mutex on|off，推荐on</td></tr><tr><td>accept_mutex_delay</td><td>新连接分配给worker子进程的超时时间</td><td>500ms</td><td>accept_mutex_delay 200ms</td></tr><tr><td>muti_accept</td><td>worker子进程可以接受的新连接个数</td><td>off</td><td>on</td></tr></tbody></table><h3 id="http" tabindex="-1">http <a class="header-anchor" href="#http" aria-label="Permalink to &quot;http&quot;">​</a></h3><p>http核心模块设置</p><table tabindex="0"><thead><tr><th>参数</th><th>意义</th><th>默认</th></tr></thead><tbody><tr><td>include</td><td>包含MIME类型</td><td>mime.types</td></tr><tr><td>default_type</td><td>默认类型</td><td>application/octet-stream</td></tr><tr><td>sendfile</td><td>启用高效文件传输</td><td>on</td></tr><tr><td>tcp_nopush</td><td>优化TCP传输</td><td>on</td></tr><tr><td>tcp_nodelay</td><td>禁用延迟</td><td>on</td></tr><tr><td>keepalive_timeout</td><td>长连接超时时间</td><td>65</td></tr><tr><td>gzip</td><td>启用gzip压缩</td><td>on</td></tr><tr><td>gzip_types</td><td>压缩的MIME类型</td><td>text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;</td></tr></tbody></table><h3 id="server" tabindex="-1">server <a class="header-anchor" href="#server" aria-label="Permalink to &quot;server&quot;">​</a></h3><p>虚拟主机</p><table tabindex="0"><thead><tr><th>参数</th><th>意义</th><th>默认</th><th>示例</th></tr></thead><tbody><tr><td>server_name</td><td>设置域名</td><td></td><td><code>server_name domain1 domain2 domainn;</code><br><code>server_name *.domain.com</code><br><code>server_name www.domain.*</code><br><code>server_name ~^www\\.domain\\..*$</code><br>优先级：精确匹配&gt;左侧通配符匹配&gt;右侧通配符匹配&gt;正则匹配</td></tr><tr><td>root</td><td>URI到磁盘文件映射</td><td></td><td>上下文可以是在 http server location if出现，与alias对比，root会将路径与URI叠加</td></tr></tbody></table><h3 id="location" tabindex="-1">location <a class="header-anchor" href="#location" aria-label="Permalink to &quot;location&quot;">​</a></h3><p>映射路由对应的处理</p>',18),t("table",{tabindex:"0"},[t("thead",null,[t("tr",null,[t("th",null,"参数"),t("th",null,"语法"),t("th",null,"意义"),t("th",null,"示例|推荐"),t("th",null,"备注")])]),t("tbody",null,[t("tr",null,[t("td",null,"alias"),t("td"),t("td",null,"URI到磁盘文件映射"),t("td",null,"上下文可以是在 location 出现，与root区别，alias只取定义路径"),t("td")]),t("tr",null,[t("td",null,"location"),t("td",{"css-module":"."},"location [=|~|~*|^~] uri"),t("td"),t("td",null,[d("1. "),t("code",null,"=精确匹配"),t("br"),d("2. "),t("code",null,"~正则匹配，区分大小写 location ~ \\.(jpg|gif)$ {...}"),t("br"),d("3. "),t("code",null,"~* 正则匹配，不区分大小写 location ~ \\.(jpg|gif)$"),t("br"),d("4. "),t("code",null,"^~ 匹配到即停止搜索 location ^~ /images/ {...}"),t("br"),d("5. "),t("code",null,"location / {...}")]),t("td",null,[t("code",null,"= > ^~ > ~ > ~* > 不带任何字符")])]),t("tr",null,[t("td",null,"stub_status"),t("td",null,"stub_status;"),t("td",null,"显示Nginx运行状态"),t("td",null,[d("location /monitor_status {"),t("br"),d(" stub_status"),t("br"),d("}")]),t("td",null,[d("Active connections: 2 "),t("br"),d("server accepts handled requests "),t("br"),d("2 2 5 "),t("br"),d("Reading: 0 Writing: 1 Waiting: 1")])])])],-1)]))}const b=r(i,[["render",l]]);export{m as __pageData,b as default};
