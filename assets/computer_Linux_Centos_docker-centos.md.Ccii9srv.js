import{_ as a,c as e,o as n,ah as o}from"./chunks/framework.BrJYEL96.js";const u=JSON.parse('{"title":"Docker 运行centos","description":"","frontmatter":{},"headers":[],"relativePath":"computer/Linux/Centos/docker-centos.md","filePath":"computer/Linux/Centos/docker-centos.md","lastUpdated":1754837914000}'),l={name:"computer/Linux/Centos/docker-centos.md"};function r(t,s,c,p,d,i){return n(),e("div",null,s[0]||(s[0]=[o(`<h1 id="docker-运行centos" tabindex="-1">Docker 运行centos <a class="header-anchor" href="#docker-运行centos" aria-label="Permalink to &quot;Docker 运行centos&quot;">​</a></h1><table tabindex="0"><thead><tr><th>web</th><th>des</th></tr></thead><tbody><tr><td><a href="https://blog.csdn.net/fengxueliuke/article/details/130805525" target="_blank" rel="noreferrer">blog</a>，<a href="https://juejin.cn/post/7383201975734075419" target="_blank" rel="noreferrer">blog</a></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki one-dark-pro vp-code" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">#交互启动容器</span></span>
<span class="line"><span style="color:#61AFEF;">docker</span><span style="color:#98C379;"> run</span><span style="color:#D19A66;"> -dit</span><span style="color:#D19A66;"> --name</span><span style="color:#98C379;"> mycentos</span><span style="color:#D19A66;"> --restart=always</span><span style="color:#D19A66;"> --privileged=true</span><span style="color:#D19A66;">  -p</span><span style="color:#98C379;"> 2222:22</span><span style="color:#98C379;"> centos:7</span><span style="color:#98C379;"> /usr/sbin/init</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="centos持久运行" tabindex="-1">centos持久运行 <a class="header-anchor" href="#centos持久运行" aria-label="Permalink to &quot;centos持久运行&quot;">​</a></h2><p>Docker 容器设计为在其主进程（PID 1）终止时停止。因此，如果你运行一个容器而不指定任何命令，容器将立即退出，因为没有进程在前台运行。</p><h3 id="解决方法" tabindex="-1">解决方法 <a class="header-anchor" href="#解决方法" aria-label="Permalink to &quot;解决方法&quot;">​</a></h3><p>有几种方法可以让容器保持运行状态：</p><h4 id="方法-1-运行一个长时间运行的命令" tabindex="-1">方法 1: 运行一个长时间运行的命令 <a class="header-anchor" href="#方法-1-运行一个长时间运行的命令" aria-label="Permalink to &quot;方法 1: 运行一个长时间运行的命令&quot;">​</a></h4><p>一种常见的方法是运行一个会一直保持活跃的命令，比如 <code>tail -f /dev/null</code>。这将使容器保持运行状态，但不会执行任何有实际意义的任务。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">docker</span><span style="color:#98C379;"> run</span><span style="color:#D19A66;"> -d</span><span style="color:#D19A66;"> --name</span><span style="color:#98C379;"> centos</span><span style="color:#98C379;"> centos:7</span><span style="color:#98C379;"> tail</span><span style="color:#D19A66;"> -f</span><span style="color:#98C379;"> /dev/null</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="方法-2-启动一个交互式-shell" tabindex="-1">方法 2: 启动一个交互式 shell <a class="header-anchor" href="#方法-2-启动一个交互式-shell" aria-label="Permalink to &quot;方法 2: 启动一个交互式 shell&quot;">​</a></h4><p>如果你只是想手动进入容器并进行操作，可以启动一个交互式 shell，例如 <code>bash</code> 或 <code>sh</code>：</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki one-dark-pro vp-code" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">docker</span><span style="color:#98C379;"> run</span><span style="color:#D19A66;"> -it</span><span style="color:#D19A66;"> --name</span><span style="color:#98C379;"> centos</span><span style="color:#98C379;"> centos:7</span><span style="color:#98C379;"> /bin/bash</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>或者，如果需要后台运行并之后再进入：</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki one-dark-pro vp-code" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">docker</span><span style="color:#98C379;"> run</span><span style="color:#D19A66;"> -d</span><span style="color:#D19A66;"> --name</span><span style="color:#98C379;"> centos</span><span style="color:#98C379;"> centos:7</span><span style="color:#98C379;"> sleep</span><span style="color:#98C379;"> infinity</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>然后可以通过 <code>docker exec</code> 命令进入容器：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">docker</span><span style="color:#98C379;"> exec</span><span style="color:#D19A66;"> -it</span><span style="color:#98C379;"> centos</span><span style="color:#98C379;"> /bin/bash</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="方法-3-使用-dockerfile-定义启动行为" tabindex="-1">方法 3: 使用 Dockerfile 定义启动行为 <a class="header-anchor" href="#方法-3-使用-dockerfile-定义启动行为" aria-label="Permalink to &quot;方法 3: 使用 Dockerfile 定义启动行为&quot;">​</a></h4><p>如果你正在构建自己的镜像，可以在 Dockerfile 中定义一个默认命令，使得容器启动时会自动运行这个命令。例如：</p><div class="language-dockerfile line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">dockerfile</span><pre class="shiki one-dark-pro vp-code" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">FROM</span><span style="color:#ABB2BF;"> centos:7</span></span>
<span class="line"><span style="color:#61AFEF;">CMD</span><span style="color:#ABB2BF;"> [</span><span style="color:#98C379;">&quot;tail&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;-f&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;/dev/null&quot;</span><span style="color:#ABB2BF;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>然后构建并运行镜像：</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki one-dark-pro vp-code" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">docker</span><span style="color:#98C379;"> build</span><span style="color:#D19A66;"> -t</span><span style="color:#98C379;"> my-centos</span><span style="color:#98C379;"> .</span></span>
<span class="line"><span style="color:#61AFEF;">docker</span><span style="color:#98C379;"> run</span><span style="color:#D19A66;"> -d</span><span style="color:#D19A66;"> --name</span><span style="color:#98C379;"> centos</span><span style="color:#98C379;"> my-centos</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>为了让你的 CentOS 容器保持运行状态，需要确保在启动容器时有一个持续运行的进程。最简单的方法是在 <code>docker run</code> 命令中指定一个长时间运行的命令，如 <code>tail -f /dev/null</code> 或 <code>sleep infinity</code>。这样，容器就不会立即退出。</p>`,24)]))}const y=a(l,[["render",r]]);export{u as __pageData,y as default};
