import{_ as n,c as a,o as l,ah as o}from"./chunks/framework.BrJYEL96.js";const C=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"computer/Linux/signal.md","filePath":"computer/Linux/signal.md","lastUpdated":1754837914000}'),p={name:"computer/Linux/signal.md"};function e(r,s,t,c,i,d){return l(),a("div",null,s[0]||(s[0]=[o(`<h2 id="信号量" tabindex="-1">信号量 <a class="header-anchor" href="#信号量" aria-label="Permalink to &quot;信号量&quot;">​</a></h2><p><strong>显示信号量</strong></p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki one-dark-pro vp-code" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#56B6C2;">kill</span><span style="color:#D19A66;"> -l</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">HUP</span><span style="color:#98C379;"> INT</span><span style="color:#98C379;"> QUIT</span><span style="color:#98C379;"> ILL</span><span style="color:#98C379;"> TRAP</span><span style="color:#98C379;"> ABRT</span><span style="color:#98C379;"> BUS</span><span style="color:#98C379;"> FPE</span><span style="color:#98C379;"> KILL</span><span style="color:#98C379;"> USR1</span><span style="color:#98C379;"> SEGV</span><span style="color:#98C379;"> USR2</span><span style="color:#98C379;"> PIPE</span><span style="color:#98C379;"> ALRM</span><span style="color:#98C379;"> TERM</span><span style="color:#98C379;"> STKFLT</span><span style="color:#98C379;"> CHLD</span><span style="color:#98C379;"> CONT</span><span style="color:#98C379;"> STOP</span><span style="color:#98C379;"> TSTP</span><span style="color:#98C379;"> TTIN</span><span style="color:#98C379;"> TTOU</span><span style="color:#98C379;"> URG</span><span style="color:#98C379;"> XCPU</span><span style="color:#98C379;"> XFSZ</span><span style="color:#98C379;"> VTALRM</span><span style="color:#98C379;"> PROF</span><span style="color:#98C379;"> WINCH</span><span style="color:#98C379;"> POLL</span><span style="color:#98C379;"> PWR</span><span style="color:#98C379;"> SYS</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="常见信号及其用途" tabindex="-1">常见信号及其用途 <a class="header-anchor" href="#常见信号及其用途" aria-label="Permalink to &quot;常见信号及其用途&quot;">​</a></h3><ul><li><strong>SIGINT</strong>：中断信号（通常由Ctrl+C产生），用于中断前台进程。</li><li><strong>SIGTERM</strong>：-15 终止信号，表示请求程序正常终止，允许程序执行清理操作。</li><li><strong>SIGKILL</strong>：-9 强制终止信号，无法被捕获或忽略，立即终止进程。</li><li><strong>SIGSEGV</strong>：段错误信号，表示非法内存访问，用于捕获和处理内存错误。</li><li><strong>SIGFPE</strong>：浮点异常信号，表示算术错误，如除零操作。</li><li><strong>SIGHUB</strong>：重新读取配置文件。</li><li><strong>SIGALRM</strong>：定时器信号，用于定时操作。</li><li><strong>SIGCHLD</strong>：-17 子进程终止信号，用于父进程捕获子进程终止事件。</li><li><strong>SIGUSR1</strong>和<strong>SIGUSR2</strong>：用户定义信号，用于自定义用途。</li><li><strong>SIGQUIT</strong>：-3 类似<code>Ctrl + \\</code>。</li></ul><p>示例：</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki one-dark-pro vp-code" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 终止NGINX进程 可以使用 nginx -s stop 替代 , 可以看帮助文档-s signal     : send signal to a master process: stop, quit, reopen, reload</span></span>
<span class="line"><span style="color:#56B6C2;">kill</span><span style="color:#D19A66;"> -s</span><span style="color:#98C379;"> SIGTERM</span><span style="color:#98C379;"> nginx-master-pid</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">#  重新加载配置文件，也就是重新加载生成子进程 nginx -s reload</span></span>
<span class="line"><span style="color:#56B6C2;">kill</span><span style="color:#D19A66;"> -s</span><span style="color:#98C379;"> SIGHUP</span><span style="color:#98C379;"> nginx-master-pid</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>`,7)]))}const g=n(p,[["render",e]]);export{C as __pageData,g as default};
