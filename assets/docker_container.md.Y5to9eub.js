import{_ as a,c as n,o as e,ah as d}from"./chunks/framework.BrJYEL96.js";const m=JSON.parse('{"title":"container","description":"","frontmatter":{},"headers":[],"relativePath":"docker/container.md","filePath":"docker/container.md","lastUpdated":1744556347000}'),s={name:"docker/container.md"};function o(r,t,c,l,p,i){return e(),n("div",null,t[0]||(t[0]=[d(`<h1 id="container" tabindex="-1">container <a class="header-anchor" href="#container" aria-label="Permalink to &quot;container&quot;">​</a></h1><h2 id="命令" tabindex="-1">命令 <a class="header-anchor" href="#命令" aria-label="Permalink to &quot;命令&quot;">​</a></h2><table tabindex="0"><thead><tr><th>命令(全)</th><th>示例</th><th>操作</th><th>备注</th></tr></thead><tbody><tr><td>docker container run &lt;image name &gt;</td><td></td><td>创建容器</td><td></td></tr><tr><td>docker container ls</td><td></td><td>列出容器（up）</td><td></td></tr><tr><td>docker container ls -a</td><td></td><td>列出容器（up &amp; down）</td><td></td></tr><tr><td>docker container ls -aq</td><td></td><td>列出容器ID</td><td></td></tr><tr><td>docker container ps -aq</td><td></td><td>列出容器ID</td><td></td></tr><tr><td>docker container stop &lt;name or ID&gt;</td><td></td><td>停止容器</td><td></td></tr><tr><td>docker container rm &lt;name or ID&gt;</td><td></td><td>删除容器</td><td>-f 强制删除</td></tr><tr><td>docker container attach &lt; container id&gt;</td><td></td><td>容器转为前台运行</td><td></td></tr><tr><td>docker container commit &lt;container id &gt; &lt; tag &gt;</td><td>docker container commit 2d34 loveagri/nginx:1.0</td><td>将一个停止的容器构建一个惊喜那个</td><td></td></tr></tbody></table><h3 id="run参数" tabindex="-1">run参数 <a class="header-anchor" href="#run参数" aria-label="Permalink to &quot;run参数&quot;">​</a></h3><p><a href="https://blog.csdn.net/wangshuai6707/article/details/132299930" target="_blank" rel="noreferrer">docker run</a></p><table tabindex="0"><thead><tr><th>参数</th><th>值</th><th>意义</th><th>示例</th></tr></thead><tbody><tr><td>-i</td><td></td><td>表示保持容器的标准输入开放</td><td></td></tr><tr><td>-t</td><td></td><td>分配一个伪终端</td><td></td></tr><tr><td>-it</td><td></td><td>以交互模式运行容器，允许与容器进行交互</td><td>docker run -it image_name\`</td></tr><tr><td><code>-d</code> 或 <code>--detach</code></td><td></td><td>在后台以守护进程模式运行容器。</td><td></td></tr><tr><td>--name</td><td></td><td>为容器指定一个名称（可以根据需要更改为您喜欢的名称）。</td><td><code>docker run --name con</code></td></tr><tr><td>-p 80:80</td><td></td><td>将主机的端口 80 映射到容器的端口 80</td><td></td></tr><tr><td>-v</td><td></td><td>挂载主机上的文件或目录到容器内部。</td><td><code>docker run -v host_path:container_path image_name</code></td></tr><tr><td>-e</td><td></td><td>设置容器的环境变量。</td><td><code>docker run -e ENV_VARIABLE=value image_name</code></td></tr><tr><td>--restart</td><td><code>no</code>、<code>on-failure[:max-retries]</code>、<code>always</code>、<code>unless-stopped</code></td><td>指定容器在退出时的重启策略。</td><td><code>docker run --restart=always image_name</code></td></tr><tr><td><code>--link</code></td><td></td><td>将容器连接到另一个容器，在两个容器之间建立网络连接。</td><td><code>docker run --link container_name:image_alias image_name</code></td></tr><tr><td>--dns</td><td></td><td>指定容器使用的自定义 DNS 服务器。</td><td><code>docker run --dns 8.8.8.8 image_name</code></td></tr><tr><td>--dns-search</td><td></td><td>指定容器的 DNS 搜索域。</td><td><code>docker run --dns-search example.com image_name</code></td></tr><tr><td><code>--cap-add</code> 和 <code>--cap-drop</code></td><td></td><td>增加或删除容器的 Linux 能力，用于控制容器的权限。</td><td><code>docker run --cap-add=SYS_ADMIN image_name</code></td></tr><tr><td>--privileged</td><td></td><td>给容器赋予特权，可以访问主机的设备。</td><td><code>docker run --privileged image_name</code></td></tr><tr><td>--tmpfs</td><td></td><td>在容器内创建临时文件系统，用于存储临时数据。</td><td><code>docker run --tmpfs /tmp image_name</code></td></tr><tr><td>--ulimit</td><td></td><td>设置容器的资源限制，如最大打开文件数、最大进程数等。</td><td>docker run --ulimit nofile=1024:1024 image_name\`</td></tr><tr><td>--security-opt</td><td></td><td>设置容器的安全选项，如 AppArmor 配置、Seccomp 配置等。</td><td><code>docker run --security-opt seccomp:unconfined image_name</code></td></tr><tr><td>--cpu-shares</td><td></td><td>设置容器的 CPU 份额，用于控制 CPU 资源的分配。</td><td><code> docker run --cpu-shares 512 image_name</code></td></tr><tr><td>--memory</td><td></td><td>设置容器可使用的内存限制。</td><td><code>docker run --memory 1g image_name</code></td></tr><tr><td>--network</td><td></td><td>指定容器使用的网络模式。</td><td><code>docker run --network bridge image_name</code></td></tr><tr><td>--hostname</td><td></td><td>设置容器的主机名。</td><td><code>docker run --hostname my_container image_name</code></td></tr><tr><td>--user</td><td></td><td>指定容器运行时的用户名或 UID。</td><td><code>docker run --user username image_name</code></td></tr><tr><td>--volume-driver</td><td></td><td>指定容器使用的卷驱动程序。</td><td><code>docker run --volume-driver my_driver image_name</code></td></tr><tr><td>--shm-size</td><td></td><td>设置容器的共享内存大小</td><td><code>docker run --shm-size 2g image_name</code></td></tr><tr><td>--add-host</td><td></td><td>向容器的 /etc/hosts 文件添加自定义主机名和 IP 映射。</td><td><code>docker run --add-host myhost:192.168.0.100 image_name</code></td></tr><tr><td>--read-only</td><td></td><td>将容器的文件系统设置为只读模式。</td><td><code>docker run --read-only image_name25</code></td></tr><tr><td>–cpu-quota</td><td></td><td>设置容器的 CPU 配额，以微秒为单位</td><td><code>docker run --cpu-quota=50000 image_name</code></td></tr><tr><td>--cpu-period</td><td></td><td>设置容器的 CPU 周期，以微秒为单位。</td><td><code>docker run --cpu-period=100000 image_name</code></td></tr><tr><td>--dns-option</td><td></td><td>为容器的 DNS 配置添加自定义选项</td><td><code>docker run --dns-option=timeout:5 image_name</code></td></tr><tr><td>--sysctl</td><td></td><td>设置容器的内核参数</td><td><code>docker run --sysctl net.ipv4.ip_forward=1 image_name</code></td></tr><tr><td>--label</td><td></td><td>为容器添加标签，用于识别和组织容器</td><td><code>docker run --label env=production image_name</code></td></tr><tr><td>--workdir</td><td></td><td>设置容器的工作目录</td><td><code>docker run --workdir /app image_name</code></td></tr><tr><td>--rm</td><td></td><td>容器退出时自动删除容器。这在临时容器中非常有用</td><td></td></tr><tr><td>--env-file</td><td></td><td>从文件中读取环境变量</td><td></td></tr></tbody></table><h2 id="批量删除或清理" tabindex="-1">批量删除或清理 <a class="header-anchor" href="#批量删除或清理" aria-label="Permalink to &quot;批量删除或清理&quot;">​</a></h2><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki one-dark-pro vp-code" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">docker</span><span style="color:#98C379;"> container</span><span style="color:#98C379;"> rm</span><span style="color:#ABB2BF;"> $(</span><span style="color:#61AFEF;">docker</span><span style="color:#98C379;"> container</span><span style="color:#98C379;"> ps</span><span style="color:#D19A66;"> -aq</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">docker</span><span style="color:#98C379;"> system</span><span style="color:#98C379;"> prune</span><span style="color:#D19A66;"> -a</span><span style="color:#D19A66;"> -f</span><span style="color:#7F848E;font-style:italic;"> # 可以快速对系统进行清理，删除停止的容器，不用的image，等等</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="detach-attach模式" tabindex="-1">detach &amp; attach模式 <a class="header-anchor" href="#detach-attach模式" aria-label="Permalink to &quot;detach &amp; attach模式&quot;">​</a></h2><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki one-dark-pro vp-code" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># attach</span></span>
<span class="line"><span style="color:#61AFEF;">docker</span><span style="color:#98C379;"> container</span><span style="color:#98C379;"> run</span><span style="color:#D19A66;"> -p</span><span style="color:#98C379;"> 80:80</span><span style="color:#98C379;"> nginx</span><span style="color:#ABB2BF;"> </span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># detach 容器会在后台执行</span></span>
<span class="line"><span style="color:#61AFEF;">docker</span><span style="color:#98C379;"> container</span><span style="color:#98C379;"> run</span><span style="color:#D19A66;"> -d</span><span style="color:#D19A66;"> -p</span><span style="color:#98C379;"> 80:80</span><span style="color:#98C379;"> nginx</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="日志" tabindex="-1">日志 <a class="header-anchor" href="#日志" aria-label="Permalink to &quot;日志&quot;">​</a></h2><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki one-dark-pro vp-code" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">docker</span><span style="color:#98C379;"> container</span><span style="color:#98C379;"> logs</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#98C379;">container</span><span style="color:#98C379;"> i</span><span style="color:#ABB2BF;">d&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># dynamic tracking logs</span></span>
<span class="line"><span style="color:#61AFEF;">docker</span><span style="color:#98C379;"> container</span><span style="color:#98C379;"> logs</span><span style="color:#D19A66;"> -f</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#98C379;">container</span><span style="color:#98C379;"> i</span><span style="color:#ABB2BF;">d&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="交互式进入container" tabindex="-1">交互式进入container <a class="header-anchor" href="#交互式进入container" aria-label="Permalink to &quot;交互式进入container&quot;">​</a></h2><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki one-dark-pro vp-code" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 直接进</span></span>
<span class="line"><span style="color:#61AFEF;">docker</span><span style="color:#98C379;"> container</span><span style="color:#98C379;"> run</span><span style="color:#D19A66;"> -it</span><span style="color:#98C379;"> busybox</span><span style="color:#98C379;"> sh</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># container detach模式进</span></span>
<span class="line"><span style="color:#61AFEF;">docker</span><span style="color:#98C379;"> container</span><span style="color:#98C379;"> exec</span><span style="color:#D19A66;"> -it</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#98C379;">container</span><span style="color:#98C379;"> i</span><span style="color:#ABB2BF;">d&gt; </span><span style="color:#98C379;">sh</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="容器持续运行" tabindex="-1">容器持续运行 <a class="header-anchor" href="#容器持续运行" aria-label="Permalink to &quot;容器持续运行&quot;">​</a></h3><p>在 Docker 中，默认情况下，<strong>容器会在其主进程（PID 1）退出时停止运行</strong>。要让一个容器持续运行（即使没有前台进程），可以通过以下方法实现：</p><h4 id="方法-1-运行一个永不退出的命令" tabindex="-1"><strong>方法 1：运行一个永不退出的命令</strong> <a class="header-anchor" href="#方法-1-运行一个永不退出的命令" aria-label="Permalink to &quot;**方法 1：运行一个永不退出的命令**&quot;">​</a></h4><p>使用 <code>tail -f /dev/null</code> 或 <code>sleep infinity</code> 作为容器的前台进程（这些命令会永久挂起，但不会消耗 CPU 资源）：</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki one-dark-pro vp-code" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">docker</span><span style="color:#98C379;"> run</span><span style="color:#D19A66;"> -d</span><span style="color:#D19A66;"> --name</span><span style="color:#98C379;"> my_container</span><span style="color:#98C379;"> ubuntu</span><span style="color:#98C379;"> tail</span><span style="color:#D19A66;"> -f</span><span style="color:#98C379;"> /dev/null</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">docker</span><span style="color:#98C379;"> run</span><span style="color:#D19A66;"> -d</span><span style="color:#D19A66;"> --name</span><span style="color:#98C379;"> my_container</span><span style="color:#98C379;"> ubuntu</span><span style="color:#98C379;"> sleep</span><span style="color:#98C379;"> infinity</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="方法-2-使用交互式终端-it" tabindex="-1"><strong>方法 2：使用交互式终端（<code>-it</code>）</strong> <a class="header-anchor" href="#方法-2-使用交互式终端-it" aria-label="Permalink to &quot;**方法 2：使用交互式终端（\`-it\`）**&quot;">​</a></h4><p>适用于需要保持容器活跃并随时交互的场景：</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki one-dark-pro vp-code" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">docker</span><span style="color:#98C379;"> run</span><span style="color:#D19A66;"> -it</span><span style="color:#D19A66;"> --name</span><span style="color:#98C379;"> my_container</span><span style="color:#98C379;"> ubuntu</span><span style="color:#98C379;"> bash</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div>`,22)]))}const b=a(s,[["render",o]]);export{m as __pageData,b as default};
