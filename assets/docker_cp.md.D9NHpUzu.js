import{_ as e,c as a,o,ah as n}from"./chunks/framework.BrJYEL96.js";const b=JSON.parse('{"title":"cp","description":"","frontmatter":{},"headers":[],"relativePath":"docker/cp.md","filePath":"docker/cp.md","lastUpdated":1744556347000}'),l={name:"docker/cp.md"};function r(c,s,t,p,d,i){return o(),a("div",null,s[0]||(s[0]=[n(`<h1 id="cp" tabindex="-1">cp <a class="header-anchor" href="#cp" aria-label="Permalink to &quot;cp&quot;">​</a></h1><h3 id="命令结构" tabindex="-1"><strong>命令结构</strong> <a class="header-anchor" href="#命令结构" aria-label="Permalink to &quot;**命令结构**&quot;">​</a></h3><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span>docker cp &lt;容器名或ID&gt;:&lt;容器内文件路径&gt; &lt;本地目标路径&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><strong><code>docker cp</code></strong>：Docker 的复制命令，用于在容器和主机之间传输文件。</li><li><strong><code>docker_ubuntu:/root/test.txt</code></strong>： <ul><li><code>docker_ubuntu</code>：容器的名称（也可以用容器ID替代，如 <code>abcd1234</code>）。</li><li><code>/root/test.txt</code>：容器内的文件路径（这里是容器中 <code>root</code> 用户目录下的 <code>test.txt</code> 文件）。</li></ul></li><li><strong><code>.</code></strong>：本地目标路径，表示复制到当前命令行所在的目录。</li></ul><hr><h3 id="执行效果" tabindex="-1"><strong>执行效果</strong> <a class="header-anchor" href="#执行效果" aria-label="Permalink to &quot;**执行效果**&quot;">​</a></h3><ol><li>Docker 会从名为 <code>docker_ubuntu</code> 的容器中，找到 <code>/root/test.txt</code> 文件。</li><li>将该文件复制到宿主机的当前目录（<code>.</code>）下，文件名保持为 <code>test.txt</code>。</li></ol><hr><h3 id="注意事项" tabindex="-1"><strong>注意事项</strong> <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;**注意事项**&quot;">​</a></h3><ol><li><p><strong>容器状态</strong>：</p><ul><li>即使容器处于停止状态（<code>Exited</code>），<code>docker cp</code> 仍然可以工作。</li></ul></li><li><p><strong>路径问题</strong>：</p><ul><li><p>如果容器内路径或本地路径包含空格或特殊字符，需要用引号包裹，例如：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span>docker cp &quot;docker_ubuntu:/root/my file.txt&quot; .</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ul></li><li><p><strong>反向操作</strong>：</p><ul><li><p>如果要将本地文件复制到容器内，调换参数顺序即可：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span>docker cp ./test.txt docker_ubuntu:/root/</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ul></li></ol><hr><h3 id="示例场景" tabindex="-1"><strong>示例场景</strong> <a class="header-anchor" href="#示例场景" aria-label="Permalink to &quot;**示例场景**&quot;">​</a></h3><p>假设你正在调试一个容器中的应用程序日志：</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki one-dark-pro vp-code" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 将容器内的日志文件复制到本地分析</span></span>
<span class="line"><span style="color:#61AFEF;">docker</span><span style="color:#98C379;"> cp</span><span style="color:#98C379;"> my_app:/var/log/app/error.log</span><span style="color:#98C379;"> ./debug_logs/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 修改后，将修复后的配置文件传回容器</span></span>
<span class="line"><span style="color:#61AFEF;">docker</span><span style="color:#98C379;"> cp</span><span style="color:#98C379;"> ./fixed_config.conf</span><span style="color:#98C379;"> my_app:/etc/app/</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki one-dark-pro vp-code" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">docker</span><span style="color:#98C379;"> cp</span><span style="color:#98C379;"> docker_ubuntu:/root/test.txt</span><span style="color:#98C379;"> .</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div>`,15)]))}const g=e(l,[["render",r]]);export{b as __pageData,g as default};
