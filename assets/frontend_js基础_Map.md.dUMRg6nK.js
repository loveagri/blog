import{_ as s,c as n,o as e,ah as l}from"./chunks/framework.BrJYEL96.js";const y=JSON.parse('{"title":"Map","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/js基础/Map.md","filePath":"frontend/js基础/Map.md","lastUpdated":1734536287000}'),p={name:"frontend/js基础/Map.md"};function o(r,a,t,c,i,d){return e(),n("div",null,a[0]||(a[0]=[l(`<h1 id="map" tabindex="-1">Map <a class="header-anchor" href="#map" aria-label="Permalink to &quot;Map&quot;">​</a></h1><p>函数、对象、基本类型都可以作为键或值</p><h3 id="声明定义" tabindex="-1">声明定义 <a class="header-anchor" href="#声明定义" aria-label="Permalink to &quot;声明定义&quot;">​</a></h3><p>可以接受一个数组作为参数，该数组的成员是一个表示键值对的数组。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> m</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Map</span><span style="color:#ABB2BF;">([</span></span>
<span class="line"><span style="color:#ABB2BF;">  [</span><span style="color:#98C379;">&#39;k1&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;v1&#39;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">  [</span><span style="color:#98C379;">&#39;k2&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;v2&#39;</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">m</span><span style="color:#ABB2BF;">)</span><span style="color:#7F848E;font-style:italic;">// {&#39;houdunren&#39; =&gt; &#39;后盾人&#39;, &#39;hdcms&#39; =&gt; &#39;开源系统&#39;}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>使用<code>set</code> 方法添加元素，支持链式操作</p><p>对于键是对象的<code>Map</code>， 键保存的是内存地址，值相同但内存地址不同的视为两个键。</p><h2 id="weakmap" tabindex="-1">WeakMap <a class="header-anchor" href="#weakmap" aria-label="Permalink to &quot;WeakMap&quot;">​</a></h2><p><strong>WeakMap</strong> 对象是一组键/值对的集</p><ul><li>键名必须是对象</li><li>WeaMap对键名是弱引用的，键值是正常引用</li><li>垃圾回收不考虑WeaMap的键名，不会改变引用计数器，键在其他地方不被引用时即删除</li><li>因为WeakMap 是弱引用，由于其他地方操作成员可能会不存在，所以不可以进行<code>forEach( )</code>遍历等操作</li><li>也是因为弱引用，WeaMap 结构没有keys( )，values( )，entries( )等方法和 size 属性</li><li>当键的外部引用删除时，希望自动删除数据时使用 <code>WeakMap</code></li></ul>`,10)]))}const u=s(p,[["render",o]]);export{y as __pageData,u as default};
