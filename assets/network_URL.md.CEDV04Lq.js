import{_ as s,c as a,o,ah as l}from"./chunks/framework.BrJYEL96.js";const m=JSON.parse('{"title":"URL 组成部分","description":"","frontmatter":{},"headers":[],"relativePath":"network/URL.md","filePath":"network/URL.md","lastUpdated":1735961033000}'),n={name:"network/URL.md"};function p(c,e,r,t,i,d){return o(),a("div",null,e[0]||(e[0]=[l(`<h1 id="url-组成部分" tabindex="-1">URL 组成部分 <a class="header-anchor" href="#url-组成部分" aria-label="Permalink to &quot;URL 组成部分&quot;">​</a></h1><p>文章主要介绍了 URL 的组成部分，包括协议、用户名和密码、主机、端口、路径、查询字符串、片段等，并详细阐述了跨域请求和同源策略。跨域指协议、主机名或端口不同的资源请求，浏览器通过同源策略限制，可通过 CORS 机制设置响应头允许跨域请求，对开发安全 Web 应用很重要。</p><h2 id="url-组成部分-1" tabindex="-1">URL 组成部分 <a class="header-anchor" href="#url-组成部分-1" aria-label="Permalink to &quot;URL 组成部分&quot;">​</a></h2><p>一个 URL（统一资源定位符，Uniform Resource Locator）包含多个部分，每个部分都定义了如何访问资源及资源的位置。下面是一个完整的 URL 结构：</p><div class="language-perl line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">perl</span><pre class="shiki one-dark-pro vp-code" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">scheme://username:password</span><span style="color:#E06C75;">@subdomain</span><span style="color:#ABB2BF;">.domain.tld:port/path?query</span><span style="color:#7F848E;font-style:italic;">#fragment</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_1-scheme-协议" tabindex="-1">1. Scheme（协议） <a class="header-anchor" href="#_1-scheme-协议" aria-label="Permalink to &quot;1. Scheme（协议）&quot;">​</a></h3><p>URL 的第一个部分是 <code>scheme</code>，也称为协议，它指示客户端（通常是浏览器）应该使用哪种协议来访问资源。常见的协议包括：</p><ul><li><code>http</code>：超文本传输协议，用于传输网页数据。</li><li><code>https</code>：安全的超文本传输协议，类似于 <code>http</code> 但使用 TLS/SSL 加密。</li><li><code>ftp</code>：文件传输协议，用于传输文件。</li><li><code>mailto</code>：用于发送电子邮件。</li><li><code>file</code>：用于访问本地文件。</li></ul><h3 id="_2-username-和-password-用户名和密码" tabindex="-1">2. Username 和 Password（用户名和密码） <a class="header-anchor" href="#_2-username-和-password-用户名和密码" aria-label="Permalink to &quot;2. Username 和 Password（用户名和密码）&quot;">​</a></h3><p><code>username</code> 和 <code>password</code> 是可选的，主要用于需要身份验证的资源访问。它们通常以 <code>username:password@</code> 的形式出现在 <code>host</code> 之前。例如：</p><div class="language-perl line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">perl</span><pre class="shiki one-dark-pro vp-code" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">ftp://user:pass</span><span style="color:#E06C75;">@ftp</span><span style="color:#ABB2BF;">.example.com/</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_3-host-主机" tabindex="-1">3. Host（主机） <a class="header-anchor" href="#_3-host-主机" aria-label="Permalink to &quot;3. Host（主机）&quot;">​</a></h3><p><code>host</code> 指定资源所在的服务器，可以是域名或 IP 地址。域名由多个部分组成，这些部分通过点（<code>.</code>）分隔。让我们详细解释一下域名的组成部分：</p><h4 id="域名的组成部分" tabindex="-1">域名的组成部分 <a class="header-anchor" href="#域名的组成部分" aria-label="Permalink to &quot;域名的组成部分&quot;">​</a></h4><ul><li><strong>顶级域名（TLD，Top-Level Domain）</strong>：这是域名的最后一部分，通常表示域的类别或国家/地区代码。例如，<code>.com</code>、<code>.org</code>、<code>.net</code>、<code>.cn</code>。</li><li><strong>二级域名（Second-Level Domain，SLD）</strong>：这是顶级域名之前的部分，通常是组织或公司的名称。例如，在 <code>example.com</code> 中，<code>example</code> 是二级域名。</li><li><strong>子域名（Subdomain）</strong>：这是在二级域名之前的部分，用于进一步划分域名。例如，在 <code>blog.example.com</code> 中，<code>blog</code> 是子域名。</li></ul><p>完整域名示例：</p><div class="language-perl line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">perl</span><pre class="shiki one-dark-pro vp-code" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">www.example.com</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>在这个域名中：</p><ul><li><code>com</code> 是顶级域名（TLD）。</li><li><code>example</code> 是二级域名（SLD）。</li><li><code>www</code> 是子域名。</li></ul><h3 id="_4-port-端口" tabindex="-1">4. Port（端口） <a class="header-anchor" href="#_4-port-端口" aria-label="Permalink to &quot;4. Port（端口）&quot;">​</a></h3><p><code>port</code> 是一个可选的部分，指示服务器上用于通信的端口号。如果省略，默认使用协议的标准端口，例如 <code>http</code> 默认端口为 80，<code>https</code> 默认端口为 443。例如：</p><div class="language-perl line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">perl</span><pre class="shiki one-dark-pro vp-code" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">http://www.example.com:8080/</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_5-path-路径" tabindex="-1">5. Path（路径） <a class="header-anchor" href="#_5-path-路径" aria-label="Permalink to &quot;5. Path（路径）&quot;">​</a></h3><p><code>path</code> 指定服务器上资源的位置，通常表示文件路径或路由。在 URL 中，路径以 <code>/</code> 开头。例如：</p><div class="language-perl line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">perl</span><pre class="shiki one-dark-pro vp-code" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">http://www.example.com/path/to/resource</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_6-query-查询字符串" tabindex="-1">6. Query（查询字符串） <a class="header-anchor" href="#_6-query-查询字符串" aria-label="Permalink to &quot;6. Query（查询字符串）&quot;">​</a></h3><p><code>query</code> 是可选的部分，用于向资源传递参数。查询字符串以 <code>?</code> 开始，参数之间用 <code>&amp;</code> 分隔。例如：</p><div class="language-ini line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki one-dark-pro vp-code" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#98C379;">http://www.example.com/search?</span><span style="color:#C678DD;">q</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">openai&amp;</span><span style="color:#C678DD;">lang</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">en</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_7-fragment-片段" tabindex="-1">7. Fragment（片段） <a class="header-anchor" href="#_7-fragment-片段" aria-label="Permalink to &quot;7. Fragment（片段）&quot;">​</a></h3><p><code>fragment</code> 是可选的部分，用于指定资源中的某个部分。它以 <code>#</code> 开始，例如页面中的某个位置或 ID。例如：</p><div class="language-perl line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">perl</span><pre class="shiki one-dark-pro vp-code" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">http://www.example.com/page</span><span style="color:#7F848E;font-style:italic;">#section2</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="例子解析" tabindex="-1">例子解析 <a class="header-anchor" href="#例子解析" aria-label="Permalink to &quot;例子解析&quot;">​</a></h2><p>让我们解析一个完整的 URL 例子：</p><div class="language-perl line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">perl</span><pre class="shiki one-dark-pro vp-code" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">https://username:password</span><span style="color:#E06C75;">@blog</span><span style="color:#ABB2BF;">.example.com:8080/path/to/resource?query=example</span><span style="color:#7F848E;font-style:italic;">#fragment</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><code>scheme</code>：<code>https</code></li><li><code>username</code>：<code>username</code></li><li><code>password</code>：<code>password</code></li><li><code>host</code>：<code>blog.example.com</code><ul><li><code>subdomain</code>：<code>blog</code></li><li><code>second-level domain (SLD)</code>：<code>example</code></li><li><code>top-level domain (TLD)</code>：<code>com</code></li></ul></li><li><code>port</code>：<code>8080</code></li><li><code>path</code>：<code>/path/to/resource</code></li><li><code>query</code>：<code>query=example</code></li><li><code>fragment</code>：<code>fragment</code></li></ul><h2 id="引入跨域" tabindex="-1">引入跨域 <a class="header-anchor" href="#引入跨域" aria-label="Permalink to &quot;引入跨域&quot;">​</a></h2><p>跨域请求涉及到浏览器安全机制的同源策略，该策略要求某个页面只能与同一来源（协议、主机名和端口相同）的资源进行交互。如果某个请求的任何一部分（协议、主机名或端口）与页面来源不同，就被认为是跨域请求。</p><p>为了详细解释跨域和同源策略，我们需要了解什么是“同源”和“跨域”。</p><h3 id="同源策略" tabindex="-1">同源策略 <a class="header-anchor" href="#同源策略" aria-label="Permalink to &quot;同源策略&quot;">​</a></h3><p>同源策略（Same-Origin Policy）是浏览器的一种安全机制，目的是防止恶意脚本在一个页面中读取另一个页面的敏感数据。同源策略要求以下三个部分完全相同：</p><ol><li><strong>协议</strong>（例如，<code>http</code> 或 <code>https</code>）</li><li><strong>主机名</strong>（例如，<code>example.com</code>）</li><li><strong>端口</strong>（例如，<code>80</code> 或 <code>443</code>）</li></ol><p>如果这三个部分中的任何一个不同，则被认为是跨域。</p><h4 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h4><p>假设当前网页的 URL 是 <code>https://www.example.com:443</code>，以下请求会被视为同源：</p><ul><li><code>https://www.example.com:443/path</code>（相同协议、主机名和端口）</li></ul><p>以下请求会被视为跨域：</p><ul><li><code>http://www.example.com:443/path</code>（不同协议）</li><li><code>https://api.example.com:443/path</code>（不同主机名）</li><li><code>https://www.example.com:8080/path</code>（不同端口）</li></ul><h3 id="跨域请求" tabindex="-1">跨域请求 <a class="header-anchor" href="#跨域请求" aria-label="Permalink to &quot;跨域请求&quot;">​</a></h3><p>跨域请求是指源（origin）不同的资源请求。浏览器默认会限制这些请求，但可以通过使用 CORS（跨源资源共享）头部来允许跨域请求。跨域请求涉及的情况包括：</p><ul><li>不同的协议（如 <code>http</code> 和 <code>https</code>）</li><li>不同的主机名（如 <code>www.example.com</code> 和 <code>api.example.com</code>）</li><li>不同的端口（如 <code>80</code> 和 <code>8080</code>）</li></ul><h4 id="示例分析" tabindex="-1">示例分析 <a class="header-anchor" href="#示例分析" aria-label="Permalink to &quot;示例分析&quot;">​</a></h4><p>以下是对同源和跨域情况的具体分析：</p><ul><li><strong>相同协议、主机名和端口</strong>： <ul><li><code>https://www.example.com:443</code> 与 <code>https://www.example.com:443/path</code></li><li>这是同源请求。</li></ul></li><li><strong>不同协议</strong>： <ul><li><code>https://www.example.com</code> 与 <code>http://www.example.com</code></li><li>这是跨域请求，因为协议不同。</li></ul></li><li><strong>不同主机名</strong>： <ul><li><code>https://www.example.com</code> 与 <code>https://api.example.com</code></li><li>这是跨域请求，因为主机名不同。</li></ul></li><li><strong>不同端口</strong>： <ul><li><code>https://www.example.com:443</code> 与 <code>https://www.example.com:8080</code></li><li>这是跨域请求，因为端口不同。</li></ul></li><li><strong>子域名</strong>： <ul><li><code>https://www.example.com</code> 与 <code>https://sub.example.com</code></li><li>这是跨域请求，因为主机名不同，尽管主域相同。</li></ul></li></ul><h4 id="域名等级和跨域" tabindex="-1">域名等级和跨域 <a class="header-anchor" href="#域名等级和跨域" aria-label="Permalink to &quot;域名等级和跨域&quot;">​</a></h4><p>域名等级（如顶级域名、二级域名、子域名等）在跨域请求中的影响：</p><ul><li><strong>顶级域名（TLD）不同</strong>：如 <code>example.com</code> 与 <code>example.net</code>，这是跨域请求。</li><li><strong>二级域名（SLD）不同</strong>：如 <code>example.com</code> 与 <code>example.org</code>，这是跨域请求。</li><li><strong>子域名不同</strong>：如 <code>www.example.com</code> 与 <code>api.example.com</code>，这是跨域请求。</li></ul><h3 id="使用-cors-解决跨域问题" tabindex="-1">使用 CORS 解决跨域问题 <a class="header-anchor" href="#使用-cors-解决跨域问题" aria-label="Permalink to &quot;使用 CORS 解决跨域问题&quot;">​</a></h3><p>跨源资源共享（CORS）是一种机制，允许服务器通过设置特定的 HTTP 头部来指示浏览器是否允许来自不同源的请求。</p><h4 id="服务器设置-cors" tabindex="-1">服务器设置 CORS <a class="header-anchor" href="#服务器设置-cors" aria-label="Permalink to &quot;服务器设置 CORS&quot;">​</a></h4><p>服务器通过设置以下 HTTP 响应头部来允许跨域请求：</p><ul><li><strong>Access-Control-Allow-Origin</strong>：指定允许访问资源的来源。例如，<code>Access-Control-Allow-Origin: https://www.example.com</code> 或 <code>Access-Control-Allow-Origin: *</code>（允许所有来源）。</li><li><strong>Access-Control-Allow-Methods</strong>：指定允许的 HTTP 方法，如 <code>GET</code>、<code>POST</code>。</li><li><strong>Access-Control-Allow-Headers</strong>：指定允许的请求头。</li><li><strong>Access-Control-Allow-Credentials</strong>：指示是否允许发送凭证（如 cookies）。</li></ul><h4 id="示例-1" tabindex="-1">示例 <a class="header-anchor" href="#示例-1" aria-label="Permalink to &quot;示例&quot;">​</a></h4><p>使用 Express.js 配置 CORS：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E06C75;">javascript</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">代码解读</span></span>
<span class="line"><span style="color:#E06C75;">复制代码const</span><span style="color:#E06C75;"> express</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;express&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> cors</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;cors&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> app</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> express</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">cors</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">    origin</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;https://www.example.com&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    methods</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&#39;GET&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;POST&#39;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#E06C75;">    allowedHeaders</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&#39;Content-Type&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;Authorization&#39;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#E06C75;">    credentials</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span></span>
<span class="line"><span style="color:#ABB2BF;">}));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;/data&#39;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">req</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">    res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">json</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;Sample data&#39;</span><span style="color:#ABB2BF;"> });</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">listen</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3000</span><span style="color:#ABB2BF;">, () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Server running on port 3000&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>跨域请求是指在协议、主机名或端口任意一项不同的情况下发起的资源请求。浏览器通过同源策略限制跨域请求，以保护用户数据的安全。CORS 机制允许服务器通过设置特定的响应头来控制和允许跨域请求，从而实现安全的跨域数据访问。理解同源策略和 CORS 机制对于开发安全的 Web 应用至关重要。</p>`,66)]))}const b=s(n,[["render",p]]);export{m as __pageData,b as default};
