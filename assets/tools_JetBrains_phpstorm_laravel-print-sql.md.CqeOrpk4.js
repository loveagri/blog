import{_ as n,c as a,o as l,ah as p}from"./chunks/framework.BrJYEL96.js";const b=JSON.parse('{"title":"laravel怎么打印执行的SQL语句","description":"","frontmatter":{},"headers":[],"relativePath":"tools/JetBrains/phpstorm/laravel-print-sql.md","filePath":"tools/JetBrains/phpstorm/laravel-print-sql.md","lastUpdated":1734879075000}'),e={name:"tools/JetBrains/phpstorm/laravel-print-sql.md"};function o(r,s,c,t,i,B){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="laravel怎么打印执行的sql语句" tabindex="-1">laravel怎么打印执行的SQL语句 <a class="header-anchor" href="#laravel怎么打印执行的sql语句" aria-label="Permalink to &quot;laravel怎么打印执行的SQL语句&quot;">​</a></h1><h3 id="_1-通过事件监听器" tabindex="-1">1. 通过事件监听器 <a class="header-anchor" href="#_1-通过事件监听器" aria-label="Permalink to &quot;1. 通过事件监听器&quot;">​</a></h3><p>Laravel提供了监听SQL执行事件的方式，开发者可以通过监听SQL执行事件来输出SQL语句，这种方式更加安全可靠，不会在生产环境中产生大量的日志。</p><p>通过定义监听器，在执行任意查询语句时都可以打印出相应的SQL语句。下面是实现代码：</p><div class="language-php line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki one-dark-pro vp-code" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 在AppServiceProvider的boot方法中，添加以下代码</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">use</span><span style="color:#ABB2BF;"> Illuminate\\Support\\Facades\\</span><span style="color:#E5C07B;">DB</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">use</span><span style="color:#ABB2BF;"> Illuminate\\Database\\Events\\</span><span style="color:#E5C07B;">QueryExecuted</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> Log</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 注册SQL执行监听器</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">DB</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">listen</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">QueryExecuted</span><span style="color:#E06C75;"> $queryExecuted</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">    $sql</span><span style="color:#56B6C2;"> =</span><span style="color:#56B6C2;"> str_replace</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;?&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;"> &quot;&#39;%s&#39;&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> $queryExecuted</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">sql</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">    $bindings</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> $queryExecuted</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">connection</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">prepareBindings</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">$queryExecuted</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">bindings</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">    $fullSql</span><span style="color:#56B6C2;"> =</span><span style="color:#56B6C2;"> vsprintf</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">$sql</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> $bindings</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">    Log</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">debug</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;SQL:&#39;</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$fullSql</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>在上述代码中，我们用DB::listen()注册一个事件监听器，当任何查询语句执行时都会被触发。</p><p>在监听器中通过 QueryExecuted 事件获取到当前查询的 SQL 语句以及相关绑定参数等信息，然后通过 Log::debug() 方法输出到日志中。</p><h3 id="_2-通过日志输出" tabindex="-1">2. 通过日志输出 <a class="header-anchor" href="#_2-通过日志输出" aria-label="Permalink to &quot;2. 通过日志输出&quot;">​</a></h3><div class="language-php line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki one-dark-pro vp-code" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 在config/database.php文件中，找到default下的connections数组，增加以下选项：</span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379;">&#39;log_queries&#39;</span><span style="color:#ABB2BF;"> =&gt; </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,  </span><span style="color:#7F848E;font-style:italic;">// 开启SQL日志记录</span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379;">&#39;log_channel&#39;</span><span style="color:#ABB2BF;"> =&gt; </span><span style="color:#98C379;">&#39;daily&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 日志存储方式，也可使用syslog、errorlog等方式</span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379;">&#39;log_level&#39;</span><span style="color:#ABB2BF;"> =&gt; </span><span style="color:#98C379;">&#39;debug&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 日志级别</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>增加log_queries选项后，Laravel会自动记录执行的SQL语句，日志会输出到storage/logs目录下。</p><p>在代码中执行查询语句后，我们可以通过下面的方式来输出SQL语句：</p><div class="language-php line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki one-dark-pro vp-code" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">DB</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">enableQueryLog</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 执行查询语句</span></span>
<span class="line"><span style="color:#E06C75;">$users</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> DB</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">table</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;users&#39;</span><span style="color:#ABB2BF;">)-&gt;</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 获取执行的SQL语句</span></span>
<span class="line"><span style="color:#E06C75;">$sql</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> DB</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">getQueryLog</span><span style="color:#ABB2BF;">()[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">][</span><span style="color:#98C379;">&#39;query&#39;</span><span style="color:#ABB2BF;">];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>在上面代码中，首先调用DB::enableQueryLog()方法开启记录SQL语句，在执行查询后，可以通过DB::getQueryLog()方法获取所有已执行的SQL语句，如果要获取最后一条SQL语句，也可使用DB::getLastQuery()方法。</p>`,13)]))}const u=n(e,[["render",o]]);export{b as __pageData,u as default};
